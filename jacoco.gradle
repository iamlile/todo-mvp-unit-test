apply plugin: 'jacoco'
jacoco {
    //version "0.7.1.201405082137"
     // version "0.7.6.201602180812"
     //toolVersion "0.7.5.201505241946"
    toolVersion = "0.7.6.201602180812"
    //toolVersion = "0.7.1.201405082137"
    //reportsDir = file("$buildDir/build/reports")
    reportsDir = file("$buildDir/customJacocoReportDir")
  }


// Define coverage source.
// If you have rs/aidl etc... add them here.
// Define coverage source.
// If you have rs/aidl etc... add them here.
def coverageSourceDirs = [
    'src/main/java',
]

task jacocoTestReport(type: JacocoReport, dependsOn: connectedCheck) {
  group = "Reporting"
  description = "Generate Jacoco coverage reports after running tests."
  reports {
    xml.enabled true
    csv.enabled  true
    html.enabled  true
    //html.destination "${buildDir}/build/reports/jacoco/"
    html.destination "${buildDir}/reports/jacoco/jacocoHtml"  
    xml.destination "${buildDir}/reports/jacoco/jacocoXml.xml"  
    csv.destination "${buildDir}/reports/jacoco/jacocoCsv.csv"  
  }
  classDirectories = fileTree(
      dir: './build/intermediates/classes/debug',
      excludes: ['**/R*.class',
                 '**/*$InjectAdapter.class',
                 '**/*$ModuleAdapter.class',
                 '**/*$ViewInjector*.class'
      ])
  sourceDirectories = files(coverageSourceDirs)
  executionData = files("$buildDir/jacoco/testDebug.exec")
  // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
  // We iterate through the compiled .class tree and rename $$ to $.
  doFirst {
    new File("$buildDir/intermediates/classes/").eachFileRecurse { file ->
      if (file.name.contains('$$')) {
        file.renameTo(file.path.replace('$$', '$'))
      }
    }
  }
}


